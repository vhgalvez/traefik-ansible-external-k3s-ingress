---
- name: Instalar y Configurar Traefik como Ingress Controller usando Docker
  hosts: load_balancers
  become: true

  vars:
    traefik_config_dir: "/etc/traefik"
    traefik_token_path: "/mnt/traefik-token/traefik.jwt"
    nfs_backup_token_path: "/srv/nfs/traefik-token/traefik.jwt"
    kubeconfig_path: "/etc/traefik/traefik-kubeconfig.yaml"
    k8s_api_vip: "10.17.5.10"
    master1_ip: "10.17.4.21"
    storage_ip: "10.17.4.27"

  tasks:
    - name: üìÑ Copiar certificado CA del API server desde master1
      delegate_to: "{{ master1_ip }}"
      run_once: true
      raw: cat /var/lib/rancher/k3s/server/tls/server-ca.crt
      register: server_ca_cert
      changed_when: false

    - name: üìÅ Crear directorios para Traefik
      raw: mkdir -p /etc/traefik /etc/traefik/certs /etc/traefik/dynamic_conf
      changed_when: false

    - name: üìÅ Crear directorio local para montar NFS (modo raw por compatibilidad)
      raw: mkdir -p /mnt/traefik-token
      changed_when: false

    - name: ‚ùå Eliminar Podman y herramientas relacionadas
      raw: |
        dnf remove -y podman podman-docker buildah || true
        rm -rf /var/lib/containers /etc/containers || true

    - name: üõ†Ô∏è Instalar dnf-plugins-core
      raw: dnf install -y dnf-plugins-core

    - name: ‚ûï A√±adir repositorio oficial de Docker
      raw: dnf config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo

    - name: üê≥ Instalar Docker CE y Docker Compose Plugin
      raw: dnf install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin

    - name: ‚ñ∂Ô∏è Habilitar y arrancar Docker
      raw: systemctl enable --now docker

    - name: üî¥ Crear carpeta y exportaci√≥n NFS en storage1
      delegate_to: "{{ storage_ip }}"
      raw: |
        mkdir -p /srv/nfs/traefik-token && chmod 0777 /srv/nfs/traefik-token
        grep -q "/srv/nfs/traefik-token" /etc/exports || echo "/srv/nfs/traefik-token 10.17.3.0/24(rw,sync,no_subtree_check,no_root_squash)" >> /etc/exports
        exportfs -rav
        systemctl restart nfs-server

    - name: üîó Montar NFS con token traefik.jwt desde storage1
      shell: |
        mkdir -p /mnt/traefik-token
        mountpoint -q /mnt/traefik-token || mount -t nfs {{ storage_ip }}:/srv/nfs/traefik-token /mnt/traefik-token
      args:
        executable: /bin/bash
      register: mount_result
      failed_when: mount_result.rc != 0 and 'access denied' not in mount_result.stderr

    - name: üïí Guardar server-ca.crt en los balanceadores
      copy:
        content: "{{ server_ca_cert.stdout_lines | join('\n') }}"
        dest: "{{ traefik_config_dir }}/certs/server-ca.crt"
        mode: "0644"

    - name: ‚ùå Eliminar ServiceAccount y ClusterRoleBinding previos
      delegate_to: "{{ master1_ip }}"
      run_once: true
      raw: |
        kubectl delete clusterrolebinding traefik-sa-crb --ignore-not-found=true || true
        kubectl delete sa traefik-sa -n default --ignore-not-found=true || true

    - name: üõ° Crear ServiceAccount para Traefik
      delegate_to: "{{ master1_ip }}"
      run_once: true
      raw: kubectl create sa traefik-sa --namespace default || true

    - name: üîê Crear ClusterRoleBinding para traefik-sa
      delegate_to: "{{ master1_ip }}"
      run_once: true
      raw: kubectl create clusterrolebinding traefik-sa-crb --clusterrole=cluster-admin --serviceaccount=default:traefik-sa

    - name: üìø Generar token JWT para traefik-sa
      delegate_to: "{{ master1_ip }}"
      run_once: true
      raw: kubectl -n default create token traefik-sa
      register: sa_token_jwt
      changed_when: false

    - name: üìÄ Guardar token JWT limpio en /mnt/traefik-token
      shell: |
        echo -n '{{ sa_token_jwt.stdout | trim }}' > {{ traefik_token_path }}
        chmod 0600 {{ traefik_token_path }}
      args:
        executable: /bin/bash

    - name: üìÄ Guardar copia del token JWT limpio en storage1
      delegate_to: "{{ storage_ip }}"
      shell: |
        echo -n '{{ sa_token_jwt.stdout | trim }}' > {{ nfs_backup_token_path }}
        chmod 0600 {{ nfs_backup_token_path }}
      args:
        executable: /bin/bash

    - name: ‚öôÔ∏è Generar kubeconfig para Traefik
      delegate_to: "{{ master1_ip }}"
      run_once: true
      raw: |
        kubectl config set-cluster k3s-cluster \
          --server=https://{{ k8s_api_vip }}:6443 \
          --certificate-authority=/var/lib/rancher/k3s/server/tls/server-ca.crt \
          --embed-certs=true \
          --kubeconfig={{ kubeconfig_path }}

        kubectl config set-credentials traefik-sa \
          --token={{ sa_token_jwt.stdout | trim }} \
          --kubeconfig={{ kubeconfig_path }}

        kubectl config set-context traefik-context \
          --cluster=k3s-cluster \
          --user=traefik-sa \
          --kubeconfig={{ kubeconfig_path }}

        kubectl config use-context traefik-context \
          --kubeconfig={{ kubeconfig_path }}

    - name: üîß Generar traefik.toml
      template:
        src: "{{ playbook_dir }}/templates/traefik/traefik.toml.j2"
        dest: "{{ traefik_config_dir }}/traefik.toml"
        mode: "0644"
      vars:
        vip: "{{ k8s_api_vip }}"

    - name: üê≥ Generar archivo docker-compose.yml
      template:
        src: "{{ playbook_dir }}/templates/traefik/docker-compose.yml.j2"
        dest: "{{ traefik_config_dir }}/docker-compose.yml"
        mode: "0644"
      vars:
        vip: "{{ k8s_api_vip }}"

    - name: ‚Ü∫ Reiniciar contenedor Traefik con nuevo token
      shell: |
        docker compose -f {{ traefik_config_dir }}/docker-compose.yml down || true
        docker compose -f {{ traefik_config_dir }}/docker-compose.yml up -d
      args:
        executable: /bin/bash

    - name: ‚úÖ Verificar estado del contenedor Traefik
      shell: docker ps -a | grep traefik || true
      register: traefik_status

    - name: üìä Mostrar estado del contenedor Traefik
      debug:
        msg: "{{ traefik_status.stdout_lines }}"