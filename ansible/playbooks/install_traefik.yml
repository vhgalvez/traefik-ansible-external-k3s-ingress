---
- name: Instalar y Configurar Traefik como Ingress Controller usando Docker
  hosts: load_balancers
  become: true

  vars:
    traefik_config_dir: "/etc/traefik"
    traefik_token_path: "/mnt/traefik-token/traefik.jwt"
    nfs_backup_token_path: "/srv/nfs/traefik-token/traefik.jwt"
    k8s_api_vip: "10.17.5.10"
    master1_ip: "10.17.4.21"

  tasks:
    - name: Copiar certificado CA del API server desde master1
      delegate_to: "{{ master1_ip }}"
      run_once: true
      raw: cat /var/lib/rancher/k3s/server/tls/server-ca.crt
      register: server_ca_cert
      changed_when: false

    - name: Crear directorios para Traefik
      file:
        path: "{{ item }}"
        state: directory
        mode: "0755"
      loop:
        - "{{ traefik_config_dir }}"
        - "{{ traefik_config_dir }}/certs"
        - "{{ traefik_config_dir }}/dynamic_conf"

    - name: Crear directorio local para montar NFS
      file:
        path: "/mnt/traefik-token"
        state: directory
        mode: "0755"

    - name: Crear carpeta y exportaciÃ³n NFS en storage1 con raw
      delegate_to: 10.17.4.27
      become: true
      block:
        - name: Crear carpeta /srv/nfs/traefik-token con raw
          raw: mkdir -p /srv/nfs/traefik-token && chmod 0755 /srv/nfs/traefik-token

        - name: Asegurar entrada en /etc/exports
          raw: |
            grep -q "/srv/nfs/traefik-token" /etc/exports || echo "/srv/nfs/traefik-token 10.17.3.0/24(rw,sync,no_subtree_check)" >> /etc/exports

        - name: Aplicar exportfs y reiniciar nfs-server
          raw: |
            exportfs -rav
            systemctl restart nfs-server

    - name: Montar NFS con token traefik.jwt desde storage1 (con manejo de error)
      shell: |
        mkdir -p /mnt/traefik-token
        mountpoint -q /mnt/traefik-token || mount -t nfs 10.17.4.27:/srv/nfs/traefik-token /mnt/traefik-token
      args:
        executable: /bin/bash
      register: mount_result
      failed_when: mount_result.rc != 0 and 'access denied' not in mount_result.stderr

    - name: Guardar server-ca.crt en los balanceadores
      copy:
        content: "{{ server_ca_cert.stdout_lines | join('\n') }}"
        dest: "{{ traefik_config_dir }}/certs/server-ca.crt"
        mode: "0644"

    - name: Verificar si ya existe kubeconfig para Traefik
      stat:
        path: "{{ traefik_config_dir }}/traefik-kubeconfig.yaml"
      register: kubeconfig_check

    - name: Crear ServiceAccount y ClusterRoleBinding para Traefik (si no existe kubeconfig)
      when: not kubeconfig_check.stat.exists
      block:
        - name: Eliminar ServiceAccount y ClusterRoleBinding previos si existen
          delegate_to: "{{ master1_ip }}"
          run_once: true
          raw: |
            kubectl delete clusterrolebinding traefik-sa-crb --ignore-not-found=true || true
            kubectl delete sa traefik-sa -n default --ignore-not-found=true || true

        - name: Crear ServiceAccount para Traefik
          delegate_to: "{{ master1_ip }}"
          run_once: true
          raw: kubectl create sa traefik-sa --namespace default || true

        - name: Crear ClusterRoleBinding para traefik-sa si no existe
          delegate_to: "{{ master1_ip }}"
          run_once: true
          raw: |
            kubectl get clusterrolebinding traefik-sa-crb || \
            kubectl create clusterrolebinding traefik-sa-crb --clusterrole=cluster-admin --serviceaccount=default:traefik-sa
          changed_when: false

        - name: Generar kubeconfig para Traefik desde master1
          delegate_to: "{{ master1_ip }}"
          run_once: true
          shell: |
            SA_NAME=traefik-sa
            NAMESPACE=default
            SECRET=$(kubectl -n $NAMESPACE get sa $SA_NAME -o jsonpath='{.secrets[0].name}')
            CA=$(kubectl -n $NAMESPACE get secret $SECRET -o jsonpath='{.data.ca\.crt}')
            TOKEN=$(kubectl -n $NAMESPACE get secret $SECRET -o jsonpath='{.data.token}' | base64 -d)
            echo """
            apiVersion: v1
            kind: Config
            clusters:
            - name: local
              cluster:
                certificate-authority-data: $CA
                server: https://{{ k8s_api_vip }}:6443
            contexts:
            - name: traefik
              context:
                cluster: local
                namespace: default
                user: traefik
            current-context: traefik
            users:
            - name: traefik
              user:
                token: $TOKEN
            """ > /tmp/traefik-kubeconfig.yaml
          args:
            executable: /bin/bash

        - name: Copiar kubeconfig generado a balanceadores
          copy:
            src: /tmp/traefik-kubeconfig.yaml
            dest: "{{ traefik_config_dir }}/traefik-kubeconfig.yaml"
            mode: "0600"

    - name: Generar traefik.toml
      template:
        src: "{{ playbook_dir }}/templates/traefik/traefik.toml.j2"
        dest: "{{ traefik_config_dir }}/traefik.toml"
        mode: "0644"
      vars:
        vip: "{{ k8s_api_vip }}"

    - name: Generar archivo docker-compose.yml
      template:
        src: "{{ playbook_dir }}/templates/traefik/docker-compose.yml.j2"
        dest: "{{ traefik_config_dir }}/docker-compose.yml"
        mode: "0644"
      vars:
        vip: "{{ k8s_api_vip }}"

    - name: Lanzar o reiniciar contenedor Traefik
      shell: |
        docker compose -f {{ traefik_config_dir }}/docker-compose.yml down || true
        docker compose -f {{ traefik_config_dir }}/docker-compose.yml up -d
      args:
        executable: /bin/bash

    - name: Verificar estado del contenedor Traefik
      shell: docker ps -a | grep traefik || true
      register: traefik_status

    - name: Mostrar estado del contenedor Traefik
      debug:
        msg: "{{ traefik_status.stdout_lines }}"