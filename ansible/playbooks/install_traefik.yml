---
- name: Instalar y Configurar Traefik como Ingress Controller usando Docker
  hosts: load_balancers
  become: true

  vars:
    traefik_config_dir: "/etc/traefik"
    traefik_token_path: "/mnt/longhorn-disk/tokens/traefik.jwt"
    k8s_api_vip: "10.17.5.10"
    master1_ip: "10.17.4.21"

  tasks:
    - name: Copiar certificado CA del API server desde master1
      delegate_to: "{{ master1_ip }}"
      run_once: true
      raw: cat /var/lib/rancher/k3s/server/tls/server-ca.crt
      register: server_ca_cert
      changed_when: false

    - name: Crear directorios para Traefik
      file:
        path: "{{ item }}"
        state: directory
        mode: "0755"
      loop:
        - "{{ traefik_config_dir }}"
        - "{{ traefik_config_dir }}/certs"
        - "{{ traefik_config_dir }}/dynamic_conf"

    - name: Crear directorio persistente para el token JWT en disco Longhorn
      file:
        path: "/mnt/longhorn-disk/tokens"
        state: directory
        mode: "0777"

    - name: Guardar server-ca.crt en los balanceadores
      copy:
        content: "{{ server_ca_cert.stdout_lines | join('\n') }}"
        dest: "{{ traefik_config_dir }}/certs/server-ca.crt"
        mode: "0644"

    - name: Asegurar que el certificado raíz existe
      stat:
        path: "{{ traefik_config_dir }}/certs/server-ca.crt"
      register: cert_check

    - name: Fallar si el certificado raíz no existe
      fail:
        msg: "El archivo server-ca.crt no se encuentra en {{ traefik_config_dir }}/certs"
      when: not cert_check.stat.exists

    - name: Eliminar Podman y herramientas relacionadas
      package:
        name:
          - podman
          - podman-docker
          - buildah
        state: absent
      ignore_errors: true

    - name: Eliminar carpetas de contenedores si existen
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - /var/lib/containers
        - /etc/containers
      ignore_errors: true

    - name: Instalar dnf-plugins-core
      package:
        name: dnf-plugins-core
        state: present

    - name: Añadir repositorio oficial de Docker
      command: dnf config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
      args:
        creates: /etc/yum.repos.d/docker-ce.repo

    - name: Instalar Docker CE y plugin docker compose
      package:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-compose-plugin
        state: present

    - name: Habilitar y arrancar Docker
      systemd:
        name: docker
        enabled: true
        state: started

    - name: Copiar certificados TLS
      copy:
        src: "files/certs/traefik.local.{{ item }}"
        dest: "{{ traefik_config_dir }}/certs/traefik.local.{{ item }}"
        mode: "0644"
      loop:
        - crt
        - key

    - name: Eliminar traefik.toml si es un directorio por error
      file:
        path: "{{ traefik_config_dir }}/traefik.toml"
        state: absent
        force: true

    - name: Crear archivo acme.json
      copy:
        dest: "{{ traefik_config_dir }}/acme.json"
        content: "{}"
        mode: "0600"

    - name: Esperar que el API Server esté listo
      delegate_to: "{{ master1_ip }}"
      run_once: true
      raw: kubectl get --raw /healthz
      register: k8s_api_health
      until: k8s_api_health.stdout == "ok"
      retries: 10
      delay: 5
      changed_when: false
      ignore_errors: true

    - name: Eliminar ServiceAccount y ClusterRoleBinding previos si existen
      delegate_to: "{{ master1_ip }}"
      run_once: true
      raw: |
        kubectl delete clusterrolebinding traefik-sa-crb --ignore-not-found=true || true
        kubectl delete sa traefik-sa -n default --ignore-not-found=true || true

    - name: Crear ServiceAccount para Traefik
      delegate_to: "{{ master1_ip }}"
      run_once: true
      raw: kubectl create sa traefik-sa --namespace default || true

    - name: Crear ClusterRoleBinding para traefik-sa si no existe
      delegate_to: "{{ master1_ip }}"
      run_once: true
      raw: |
        kubectl get clusterrolebinding traefik-sa-crb || \
        kubectl create clusterrolebinding traefik-sa-crb --clusterrole=cluster-admin --serviceaccount=default:traefik-sa
      changed_when: false

    - name: Obtener token moderno (JWT) del ServiceAccount traefik-sa
      delegate_to: "{{ master1_ip }}"
      run_once: true
      raw: kubectl -n default create token traefik-sa
      register: sa_token_jwt
      changed_when: false

    - name: Guardar token JWT en ruta persistente (Longhorn)
      copy:
        content: "{{ sa_token_jwt.stdout | trim }}"
        dest: "{{ traefik_token_path }}"
        mode: "0600"

    - name: Generar traefik.toml
      template:
        src: "{{ playbook_dir }}/templates/traefik/traefik.toml.j2"
        dest: "{{ traefik_config_dir }}/traefik.toml"
        mode: "0644"
      vars:
        vip: "{{ k8s_api_vip }}"

    - name: Generar archivo docker-compose.yml
      template:
        src: "{{ playbook_dir }}/templates/traefik/docker-compose.yml.j2"
        dest: "{{ traefik_config_dir }}/docker-compose.yml"
        mode: "0644"
      vars:
        vip: "{{ k8s_api_vip }}"

    - name: Lanzar o reiniciar contenedor Traefik
      shell: |
        docker compose -f {{ traefik_config_dir }}/docker-compose.yml down || true
        docker compose -f {{ traefik_config_dir }}/docker-compose.yml up -d
      args:
        executable: /bin/bash

    - name: Verificar estado del contenedor Traefik
      shell: docker ps -a | grep traefik || true
      register: traefik_status

    - name: Mostrar estado del contenedor Traefik
      debug:
        msg: "{{ traefik_status.stdout_lines }}"

    - name: Copiar token JWT al nodo storage1 como respaldo
      delegate_to: storage1.cefaslocalserver.com
      become: true
      copy:
        content: "{{ sa_token_jwt.stdout | trim }}"
        dest: "/mnt/longhorn-disk/tokens/traefik.jwt"
        mode: "0600"