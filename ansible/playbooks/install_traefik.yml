# ansible\playbooks\install_traefik.yml
---
- name: Instalar y Configurar Traefik como Ingress Controller usando Docker
  hosts: load_balancers
  become: true

  vars:
    traefik_config_dir: "/etc/traefik"
    kubeconfig_path: "/etc/traefik/traefik-kubeconfig.yaml"
    kubeconfig_backup_path: "/srv/nfs/traefik-token/traefik-kubeconfig.yaml"
    k8s_api_vip: "10.17.5.10"
    master1_ip: "10.17.4.21"
    storage_ip: "10.17.4.27"

  tasks:
    - name: 📄 Copiar certificado CA del API server desde master1
      delegate_to: "{{ master1_ip }}"
      run_once: true
      raw: cat /var/lib/rancher/k3s/server/tls/server-ca.crt
      register: server_ca_cert
      changed_when: false

    - name: 📁 Crear directorios para Traefik
      raw: mkdir -p /etc/traefik /etc/traefik/certs /etc/traefik/dynamic_conf
      changed_when: false

    - name: 🔒 Verificar si existe el certificado autofirmado
      stat:
        path: "{{ traefik_config_dir }}/certs/traefik.crt"
      register: cert_stat

    - name: 🔐 Verificar si existe la clave privada autofirmada
      stat:
        path: "{{ traefik_config_dir }}/certs/traefik.key"
      register: key_stat

    - name: 🔧 Generar certificado autofirmado traefik.crt y traefik.key si no existen
      shell: |
        openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
          -subj "/CN=traefik.local" \
          -keyout {{ traefik_config_dir }}/certs/traefik.key \
          -out {{ traefik_config_dir }}/certs/traefik.crt
      args:
        executable: /bin/bash
      when: not cert_stat.stat.exists or not key_stat.stat.exists

    - name: 📁 Establecer permisos seguros para los certificados
      file:
        path: "{{ item.path }}"
        mode: "{{ item.mode }}"
      loop:
        - { path: "{{ traefik_config_dir }}/certs/traefik.crt", mode: "0644" }
        - { path: "{{ traefik_config_dir }}/certs/traefik.key", mode: "0600" }

    - name: 📁 Crear directorio local para montar NFS (modo raw por compatibilidad)
      raw: mkdir -p /mnt/traefik-token
      changed_when: false

    - name: ❌ Eliminar Podman y herramientas relacionadas
      raw: |
        dnf remove -y podman podman-docker buildah || true
        rm -rf /var/lib/containers /etc/containers || true

    - name: 💪 Instalar dnf-plugins-core
      raw: dnf install -y dnf-plugins-core

    - name: ➕ Añadir repositorio oficial de Docker
      raw: dnf config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo

    - name: 🚓 Instalar Docker CE y Docker Compose Plugin
      raw: dnf install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin

    - name: ▶️ Habilitar y arrancar Docker
      raw: systemctl enable --now docker

    - name: 🔴 Crear carpeta y exportación NFS en storage1
      delegate_to: "{{ storage_ip }}"
      raw: |
        mkdir -p /srv/nfs/traefik-token && chmod 0777 /srv/nfs/traefik-token
        grep -q "/srv/nfs/traefik-token" /etc/exports || echo "/srv/nfs/traefik-token 10.17.3.0/24(rw,sync,no_subtree_check,no_root_squash)" >> /etc/exports
        exportfs -rav
        systemctl restart nfs-server

    - name: 🔗 Montar NFS desde storage1
      shell: |
        mkdir -p /mnt/traefik-token
        mountpoint -q /mnt/traefik-token || mount -t nfs {{ storage_ip }}:/srv/nfs/traefik-token /mnt/traefik-token
      args:
        executable: /bin/bash
      register: mount_result
      failed_when: mount_result.rc != 0 and 'access denied' not in mount_result.stderr

    - name: 🕒 Guardar server-ca.crt en los balanceadores
      copy:
        content: "{{ server_ca_cert.stdout_lines | join('\n') }}"
        dest: "{{ traefik_config_dir }}/certs/server-ca.crt"
        mode: "0644"

    - name: ❌ Eliminar ServiceAccount y ClusterRoleBinding previos
      delegate_to: "{{ master1_ip }}"
      run_once: true
      raw: |
        kubectl delete clusterrolebinding traefik-sa-crb --ignore-not-found=true || true
        kubectl delete sa traefik-sa -n default --ignore-not-found=true || true

    - name: 🛡 Crear ServiceAccount para Traefik
      delegate_to: "{{ master1_ip }}"
      run_once: true
      raw: kubectl create sa traefik-sa --namespace default || true

    - name: 🔐 Crear ClusterRoleBinding para traefik-sa
      delegate_to: "{{ master1_ip }}"
      run_once: true
      raw: kubectl create clusterrolebinding traefik-sa-crb --clusterrole=cluster-admin --serviceaccount=default:traefik-sa

    - name: ⚙️ Generar kubeconfig para Traefik (solo en master1)
      delegate_to: "{{ master1_ip }}"
      run_once: true
      raw: |
        kubectl config set-cluster k3s-cluster \
          --server=https://{{ k8s_api_vip }}:6443 \
          --certificate-authority=/var/lib/rancher/k3s/server/tls/server-ca.crt \
          --embed-certs=true \
          --kubeconfig={{ kubeconfig_path }}

        kubectl config set-credentials traefik-sa \
          --token=$(kubectl -n default create token traefik-sa) \
          --kubeconfig={{ kubeconfig_path }}

        kubectl config set-context traefik-context \
          --cluster=k3s-cluster \
          --user=traefik-sa \
          --kubeconfig={{ kubeconfig_path }}

        kubectl config use-context traefik-context \
          --kubeconfig={{ kubeconfig_path }}

        chmod 0600 {{ kubeconfig_path }}

    - name: 👤 Cambiar propietario del kubeconfig para permitir lectura por 'core'
      delegate_to: "{{ master1_ip }}"
      run_once: true
      raw: chown core:core {{ kubeconfig_path }}

    - name: 🔓 Permitir lectura temporal del kubeconfig
      delegate_to: "{{ master1_ip }}"
      run_once: true
      raw: chmod 0644 {{ kubeconfig_path }}

    - name: 🗓️ Copiar kubeconfig al storage1 (desde localhost usando doble scp robusto)
      run_once: true
      delegate_to: localhost
      shell: |
        set -e
        TMP_KUBECONFIG="/tmp/traefik-kubeconfig.yaml"

        echo "🗓️ Descargando kubeconfig desde master1..."
        scp -i /root/.ssh/cluster_k3s/shared/id_rsa_shared_cluster \
            -o StrictHostKeyChecking=no \
            core@{{ master1_ip }}:{{ kubeconfig_path }} ${TMP_KUBECONFIG}

        echo "📄 Subiendo kubeconfig a storage1..."
        scp -i /root/.ssh/cluster_k3s/shared/id_rsa_shared_cluster \
            -o StrictHostKeyChecking=no \
            ${TMP_KUBECONFIG} core@{{ storage_ip }}:{{ kubeconfig_backup_path }}

        echo "🪟 Limpiando archivo temporal..."
        rm -f ${TMP_KUBECONFIG}
      args:
        executable: /bin/bash

    - name: ✅ Verificar que kubeconfig se copió correctamente en storage1 (modo raw para Flatcar)
      run_once: true
      delegate_to: "{{ storage_ip }}"
      raw: test -f {{ kubeconfig_backup_path }}
      register: kubeconfig_check
      ignore_errors: true

    - name: ❌ Abortamos si kubeconfig no se copió a storage1
      run_once: true
      fail:
        msg: "El archivo kubeconfig no se encontró en {{ kubeconfig_backup_path }}. Revisa el paso de doble scp."
      when: kubeconfig_check.rc != 0

    - name: 🔐 Establecer permisos del backup en storage1 (modo raw)
      delegate_to: "{{ storage_ip }}"
      run_once: true
      raw: chmod 0600 {{ kubeconfig_backup_path }}

    - name: 🔧 Generar traefik.toml
      template:
        src: "{{ playbook_dir }}/templates/traefik/traefik.toml.j2"
        dest: "{{ traefik_config_dir }}/traefik.toml"
        mode: "0644"
      vars:
        vip: "{{ k8s_api_vip }}"

    - name: 🚓 Generar archivo docker-compose.yml
      template:
        src: "{{ playbook_dir }}/templates/traefik/docker-compose.yml.j2"
        dest: "{{ traefik_config_dir }}/docker-compose.yml"
        mode: "0644"
      vars:
        vip: "{{ k8s_api_vip }}"

    - name: Eliminar acme.json si es un directorio por error
      file:
        path: "{{ traefik_config_dir }}/acme.json"
        state: absent
        force: true

    - name: Crear archivo acme.json correctamente
      copy:
        dest: "{{ traefik_config_dir }}/acme.json"
        content: "{}"
        mode: "0600"

    - name: 🤩 Eliminar contenedor traefik si ya existe (evitar conflicto de nombres)
      shell: docker rm -f traefik || true
      args:
        executable: /bin/bash

    - name: ↺ Reiniciar contenedor Traefik con nuevo kubeconfig
      shell: docker compose -f {{ traefik_config_dir }}/docker-compose.yml up -d
      args:
        executable: /bin/bash

    - name: ✅ Verificar estado del contenedor Traefik
      shell: docker ps -a | grep traefik || true
      register: traefik_status

    - name: 📊 Mostrar estado del contenedor Traefik
      debug:
        msg: "{{ traefik_status.stdout_lines }}"

    - name: 🖼 Copiar unidad systemd traefik-docker.service
      template:
        src: "{{ playbook_dir }}/templates/traefik/traefik-docker.service.j2"
        dest: "/etc/systemd/system/traefik-docker.service"
        mode: "0644"

    - name: 🔁 Recargar systemd
      command: systemctl daemon-reload

    - name: ✅ Habilitar traefik-docker.service
      systemd:
        name: traefik-docker.service
        enabled: true

    - name: ▶️ Iniciar traefik-docker.service
      systemd:
        name: traefik-docker.service
        state: started
