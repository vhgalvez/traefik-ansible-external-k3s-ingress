---
- name: Install and Configure Traefik as Ingress Controller using Docker
  hosts: load_balancers
  become: true
  vars:
    traefik_config_dir: "/etc/traefik"
    k8s_api_vip: "10.17.5.10"
    kubeconfig_local_path: "/tmp/kubeconfig-traefik"
    kubeconfig_remote_path: "/etc/traefik/kubeconfig"
    cert_common_name: "traefik.local"
    certs_local_dir: "files/certs"
    master_host: "{{ groups['masters'][0] }}"

  tasks:
    - name: 🧹 Ensure directories exist
      file:
        path: "{{ item }}"
        state: directory
        mode: "0755"
      loop:
        - "{{ traefik_config_dir }}"
        - "{{ traefik_config_dir }}/certs"
        - "{{ traefik_config_dir }}/dynamic_conf"

    - name: 📄 Copy certificates to load balancer
      copy:
        src: "{{ certs_local_dir }}/{{ cert_common_name }}.{{ item }}"
        dest: "{{ traefik_config_dir }}/certs/{{ cert_common_name }}.{{ item }}"
        mode: "0644"
      loop: ["crt", "key"]

    - name: 📦 Install Docker and dependencies (RedHat)
      when: ansible_os_family == "RedHat"
      block:
        - name: Add Docker CE repo
          get_url:
            url: https://download.docker.com/linux/centos/docker-ce.repo
            dest: /etc/yum.repos.d/docker-ce.repo

        - name: Install Docker packages
          package:
            name:
              - docker-ce
              - docker-ce-cli
              - containerd.io
              - docker-compose-plugin
            state: present

        - name: Enable Docker
          systemd:
            name: docker
            enabled: true
            state: started

    - name: 🛫 Obtener kubeconfig del master
      delegate_to: "{{ master_host }}"
      become: false
      raw: |
        cat /etc/rancher/k3s/k3s.yaml
      register: raw_kubeconfig

    - name: 📄 Guardar kubeconfig localmente con VIP
      delegate_to: localhost
      become: false
      copy:
        content: "{{ raw_kubeconfig.stdout | regex_replace('127.0.0.1', k8s_api_vip) }}"
        dest: "{{ kubeconfig_local_path }}"

    - name: 🔐 Crear ServiceAccount y ClusterRoleBinding para Traefik
      delegate_to: localhost
      become: false
      shell: |
        KUBECONFIG={{ kubeconfig_local_path }} kubectl -n kube-system create serviceaccount traefik-ingress-controller --dry-run=client -o yaml | kubectl --kubeconfig={{ kubeconfig_local_path }} apply -f -
        KUBECONFIG={{ kubeconfig_local_path }} kubectl create clusterrolebinding traefik-ingress-controller --clusterrole=cluster-admin --serviceaccount=kube-system:traefik-ingress-controller --dry-run=client -o yaml | kubectl --kubeconfig={{ kubeconfig_local_path }} apply -f -

    - name: 🔑 Obtener token de ServiceAccount
      delegate_to: localhost
      become: false
      shell: |
        TOKEN_NAME=$(kubectl --kubeconfig={{ kubeconfig_local_path }} -n kube-system get sa/traefik-ingress-controller -o jsonpath='{.secrets[0].name}')
        kubectl --kubeconfig={{ kubeconfig_local_path }} -n kube-system get secret $TOKEN_NAME -o jsonpath='{.data.token}' | base64 -d
      register: traefik_token_result

    - name: 📂 Copiar kubeconfig al nodo load balancer
      copy:
        src: "{{ kubeconfig_local_path }}"
        dest: "{{ kubeconfig_remote_path }}"
        mode: "0644"

    - name: 📦 Crear archivo .env para Traefik
      copy:
        dest: "{{ traefik_config_dir }}/.env"
        content: |
          TRAEFIK_CONFIG_DIR={{ traefik_config_dir }}
          TRAEFIK_CERT_CN={{ cert_common_name }}
          TRAEFIK_KUBECONFIG={{ kubeconfig_remote_path }}
          TRAEFIK_API_VIP={{ k8s_api_vip }}
          TRAEFIK_TOKEN={{ traefik_token_result.stdout }}
        mode: "0644"

    - name: 🧾 Crear archivo acme.json
      copy:
        dest: "{{ traefik_config_dir }}/acme.json"
        content: "{}"
        mode: "0600"

    - name: 🛠️ Render traefik.toml config
      template:
        src: "../../templates/traefik/traefik.toml.j2"
        dest: "{{ traefik_config_dir }}/traefik.toml"
        mode: "0644"
      vars:
        traefik_token: "{{ traefik_token_result.stdout }}"

    - name: 🛠️ Render docker-compose.yml
      template:
        src: "../../templates/traefik/docker-compose.yml.j2"
        dest: "{{ traefik_config_dir }}/docker-compose.yml"
        mode: "0644"

    - name: 🚀 Iniciar Traefik con docker-compose
      shell: |
        docker compose -f {{ traefik_config_dir }}/docker-compose.yml down || true
        docker compose -f {{ traefik_config_dir }}/docker-compose.yml up -d
      args:
        executable: /bin/bash

    - name: 🔍 Verificar estado del contenedor
      shell: docker ps -a | grep traefik
      register: traefik_status

    - name: 📊 Mostrar estado
      debug:
        msg: "{{ traefik_status.stdout_lines }}"