# ansible/playbooks/install_traefik.yml
- name: Instalar y Configurar Traefik como Ingress Controller usando Docker
  hosts: load_balancers
  become: true

  vars:
    traefik_config_dir: "/etc/traefik"
    kubeconfig_path: "/etc/traefik/traefik-kubeconfig.yaml"
    kubeconfig_backup_path: "/srv/nfs/traefik-token/traefik-kubeconfig.yaml"
    k8s_api_vip: "10.17.5.10"
    master1_ip: "10.17.4.21"
    storage_ip: "10.17.4.27"

  tasks:
    - name: Verificar si el contenedor de Traefik existe
      shell: docker ps -a -q --filter "name=traefik"
      register: traefik_container
      changed_when: false
      failed_when: false

    - name: Eliminar contenedor de Traefik si ya existe
      shell: docker rm -f traefik
      when: traefik_container.stdout != ""
      ignore_errors: true

    - name: 🧹 Eliminar /etc/traefik si existe
      file:
        path: /etc/traefik
        state: absent
        force: true

    - name: 📁 Crear directorios necesarios para Traefik
      file:
        path: "{{ item }}"
        state: directory
        mode: "0755"
      loop:
        - "{{ traefik_config_dir }}"
        - "{{ traefik_config_dir }}/certs"
        - "{{ traefik_config_dir }}/dynamic_conf"
        - "{{ traefik_config_dir }}/secrets"

    - name: 🧨 Verificar si traefik.toml es directorio
      stat:
        path: "{{ traefik_config_dir }}/traefik.toml"
      register: traefik_toml_stat

    - name: 🧹 Eliminar traefik.toml si es directorio
      file:
        path: "{{ traefik_config_dir }}/traefik.toml"
        state: absent
      when: traefik_toml_stat.stat.isdir is defined and traefik_toml_stat.stat.isdir

    - name: 🧨 Verificar si traefik-kubeconfig.yaml es directorio
      stat:
        path: "{{ kubeconfig_path }}"
      register: kubeconfig_stat

    - name: 🧹 Eliminar traefik-kubeconfig.yaml si es directorio
      file:
        path: "{{ kubeconfig_path }}"
        state: absent
      when: kubeconfig_stat.stat.isdir is defined and kubeconfig_stat.stat.isdir

    - name: 📄 Copiar certificado CA del API server desde master1
      delegate_to: "{{ master1_ip }}"
      run_once: true
      raw: cat /var/lib/rancher/k3s/server/tls/server-ca.crt
      register: server_ca_cert
      changed_when: false

    - name: 🔒 Verificar si existe el certificado autofirmado
      stat:
        path: "{{ traefik_config_dir }}/certs/traefik.crt"
      register: cert_stat

    - name: 🔐 Verificar si existe la clave privada autofirmada
      stat:
        path: "{{ traefik_config_dir }}/certs/traefik.key"
      register: key_stat

    - name: 🔧 Generar certificado autofirmado traefik.crt y traefik.key si no existen
      shell: |
        openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
          -subj "/CN=traefik.local" \
          -keyout {{ traefik_config_dir }}/certs/traefik.key \
          -out {{ traefik_config_dir }}/certs/traefik.crt
      args:
        executable: /bin/bash
      when: not cert_stat.stat.exists or not key_stat.stat.exists

    - name: 📁 Establecer permisos seguros para los certificados
      file:
        path: "{{ item.path }}"
        mode: "{{ item.mode }}"
      loop:
        - { path: "{{ traefik_config_dir }}/certs/traefik.crt", mode: "0644" }
        - { path: "{{ traefik_config_dir }}/certs/traefik.key", mode: "0600" }

    - name: ❌ Eliminar Podman y herramientas relacionadas
      raw: |
        dnf remove -y podman podman-docker buildah || true
        rm -rf /var/lib/containers /etc/containers || true

    - name: 💪 Instalar dnf-plugins-core
      raw: dnf install -y dnf-plugins-core

    - name: ➕ Añadir repositorio oficial de Docker
      raw: dnf config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo

    - name: 🚓 Instalar Docker CE y Docker Compose Plugin
      raw: dnf install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin

    - name: ▶️ Habilitar y arrancar Docker
      raw: systemctl enable --now docker

    - name: 🔴 Crear carpeta y exportación NFS en storage1
      delegate_to: "{{ storage_ip }}"
      raw: |
        mkdir -p /srv/nfs/traefik-token && chmod 0777 /srv/nfs/traefik-token
        grep -q "/srv/nfs/traefik-token" /etc/exports || echo "/srv/nfs/traefik-token 10.17.3.0/24(rw,sync,no_subtree_check,no_root_squash)" >> /etc/exports
        exportfs -rav
        systemctl restart nfs-server

    - name: 🔗 Montar NFS desde storage1
      shell: |
        mkdir -p /mnt/traefik-token
        mountpoint -q /mnt/traefik-token || mount -t nfs {{ storage_ip }}:/srv/nfs/traefik-token /mnt/traefik-token
      args:
        executable: /bin/bash
      register: mount_result
      failed_when: mount_result.rc != 0 and 'access denied' not in mount_result.stderr

    - name: 🕒 Guardar server-ca.crt en los balanceadores
      copy:
        content: "{{ server_ca_cert.stdout_lines | join('\n') }}"
        dest: "{{ traefik_config_dir }}/certs/server-ca.crt"
        mode: "0644"

    - name: 🔐 Crear archivo traefik-kubeconfig.yaml
      copy:
        dest: "{{ kubeconfig_path }}"
        mode: "0600"
        owner: root
        group: root
        content: |
          apiVersion: v1
          kind: Config
          clusters:
          - name: default
            cluster:
              server: https://{{ k8s_api_vip }}:6443
              insecure-skip-tls-verify: true
          contexts:
          - name: default
            context:
              cluster: default
              user: remote-access
          current-context: default
          users:
          - name: remote-access
            user:
              token: {{ traefik_token.stdout | trim }}

    - name: 🔧 Generar traefik.toml
      template:
        src: "{{ playbook_dir }}/templates/traefik/traefik.toml.j2"
        dest: "{{ traefik_config_dir }}/traefik.toml"
        mode: "0644"

    - name: 🚓 Generar archivo docker-compose.yml
      template:
        src: "{{ playbook_dir }}/templates/traefik/docker-compose.yml.j2"
        dest: "{{ traefik_config_dir }}/docker-compose.yml"
        mode: "0644"

    - name: ✅ Crear archivo acme.json correctamente
      copy:
        dest: "{{ traefik_config_dir }}/acme.json"
        content: "{}"
        mode: "0600"
        owner: root
        group: root

    - name: Renderiza dashboard.toml para habilitar el dashboard
      template:
        src: templates/traefik/dashboard.toml.j2
        dest: /etc/traefik/dynamic_conf/dashboard.toml
        owner: root
        group: root
        mode: "0644"

    - name: 🔐 Copiar archivo users.htpasswd externo
      copy:
        src: "{{ playbook_dir }}/files/htpasswd.txt"
        dest: "{{ traefik_config_dir }}/secrets/users.htpasswd"
        owner: root
        group: root
        mode: "0640"

    - name: ↺ Reiniciar contenedor Traefik con nuevo kubeconfig
      shell: docker compose -f {{ traefik_config_dir }}/docker-compose.yml up -d
      args:
        executable: /bin/bash

    - name: ✅ Verificar estado del contenedor Traefik
      shell: docker ps -a | grep traefik || true
      register: traefik_status

    - name: 📊 Mostrar estado del contenedor Traefik
      debug:
        msg: "{{ traefik_status.stdout_lines }}"

    - name: 🖼 Copiar unidad systemd traefik-docker.service
      template:
        src: "{{ playbook_dir }}/templates/traefik/traefik-docker.service.j2"
        dest: "/etc/systemd/system/traefik-docker.service"
        mode: "0644"

    - name: 🔁 Recargar systemd
      command: systemctl daemon-reload

    - name: ✅ Habilitar traefik-docker.service
      systemd:
        name: traefik-docker.service
        enabled: true

    - name: ▶️ Iniciar traefik-docker.service
      systemd:
        name: traefik-docker.service
        state: started