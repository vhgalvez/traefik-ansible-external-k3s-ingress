# ansible/playbooks/install_traefik.yml
- name: Instalar y Configurar Traefik como Ingress Controller usando Docker
  hosts: load_balancers
  become: true

  vars:
    traefik_config_dir: "/etc/traefik"
    kubeconfig_path: "/etc/traefik/traefik-kubeconfig.yaml"
    k8s_api_vip: "10.17.5.10"
    master1_ip: "10.17.4.21"
    storage_ip: "10.17.4.27"

  tasks:

    - name: 🧨 Limpiar artefactos previos
      shell: |
        rm -rf {{ traefik_config_dir }}/* {{ traefik_config_dir }}/.* 2>/dev/null || true
      args:
        executable: /bin/bash
      ignore_errors: true

    - name: 🛠️ Crear estructura de directorios limpia
      file:
        path: "{{ item }}"
        state: directory
        mode: "0755"
      loop:
        - "{{ traefik_config_dir }}"
        - "{{ traefik_config_dir }}/certs"
        - "{{ traefik_config_dir }}/dynamic_conf"

    - name: 🚧 Eliminar contenedor de Traefik si ya existe
      shell: docker rm -f traefik || true
      args:
        executable: /bin/bash
      ignore_errors: true

    - name: 📄 Copiar server-ca.crt desde master1
      delegate_to: "{{ master1_ip }}"
      run_once: true
      raw: cat /var/lib/rancher/k3s/server/tls/server-ca.crt
      register: server_ca_cert
      changed_when: false

    - name: 🗂️ Guardar server-ca.crt en los balanceadores
      copy:
        content: "{{ server_ca_cert.stdout_lines | join('\n') }}"
        dest: "{{ traefik_config_dir }}/certs/server-ca.crt"
        mode: "0644"

    - name: 🔐 Verificar existencia de certificados
      stat:
        path: "{{ item }}"
      register: cert_stat
      loop:
        - "{{ traefik_config_dir }}/certs/traefik.crt"
        - "{{ traefik_config_dir }}/certs/traefik.key"

    - name: 🔏 Generar certificados autofirmados si faltan
      shell: |
        openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
        -subj "/CN=traefik.local" \
        -keyout {{ traefik_config_dir }}/certs/traefik.key \
        -out {{ traefik_config_dir }}/certs/traefik.crt
      when: not cert_stat.results[0].stat.exists or not cert_stat.results[1].stat.exists
      args:
        executable: /bin/bash

    - name: 🔒 Establecer permisos a certificados
      file:
        path: "{{ item.path }}"
        mode: "{{ item.mode }}"
      loop:
        - { path: "{{ traefik_config_dir }}/certs/traefik.crt", mode: "0644" }
        - { path: "{{ traefik_config_dir }}/certs/traefik.key", mode: "0600" }

    - name: 🧰 Crear directorio para NFS token
      file:
        path: /mnt/traefik-token
        state: directory
        mode: "0755"

    - name: 🔗 Montar NFS con retry
      shell: |
        for i in {1..5}; do
          mountpoint -q /mnt/traefik-token && break
          mount -t nfs {{ storage_ip }}:/srv/nfs/traefik-token /mnt/traefik-token && break
          sleep 5
        done
      args:
        executable: /bin/bash

    - name: 🔑 Crear service account traefik-sa en master1
      delegate_to: "{{ master1_ip }}"
      run_once: true
      raw: |
        kubectl delete sa traefik-sa -n default --ignore-not-found=true || true
        kubectl delete clusterrolebinding traefik-sa-crb --ignore-not-found=true || true
        kubectl create sa traefik-sa -n default || true
        kubectl create clusterrolebinding traefik-sa-crb --clusterrole=cluster-admin --serviceaccount=default:traefik-sa

    - name: 📥 Generar token JWT de traefik-sa
      delegate_to: "{{ master1_ip }}"
      run_once: true
      raw: kubectl -n default create token traefik-sa
      register: traefik_token

    - name: 📄 Crear traefik-kubeconfig.yaml
      copy:
        dest: "{{ kubeconfig_path }}"
        mode: "0600"
        content: |
          apiVersion: v1
          kind: Config
          clusters:
          - name: default
            cluster:
              server: https://{{ k8s_api_vip }}:6443
              insecure-skip-tls-verify: true
          contexts:
          - name: default
            context:
              cluster: default
              user: remote-access
          current-context: default
          users:
          - name: remote-access
            user:
              token: {{ traefik_token.stdout | trim }}

    - name: 🛠 Renderizar traefik.toml con kubeconfig
      template:
        src: "{{ playbook_dir }}/templates/traefik/traefik.toml.j2"
        dest: "{{ traefik_config_dir }}/traefik.toml"
        mode: "0644"

    - name: 🧾 Renderizar docker-compose.yml
      template:
        src: "{{ playbook_dir }}/templates/traefik/docker-compose.yml.j2"
        dest: "{{ traefik_config_dir }}/docker-compose.yml"
        mode: "0644"

    - name: 🧼 Eliminar acme.json si es directorio
      file:
        path: "{{ traefik_config_dir }}/acme.json"
        state: absent
        force: true

    - name: ➕ Crear acme.json
      copy:
        dest: "{{ traefik_config_dir }}/acme.json"
        content: "{}"
        mode: "0600"

    - name: 🔁 Lanzar contenedor Traefik con docker-compose
      shell: docker compose -f {{ traefik_config_dir }}/docker-compose.yml up -d
      args:
        executable: /bin/bash

    - name: 📈 Mostrar estado de Traefik
      shell: docker ps -a | grep traefik || true
      register: traefik_status

    - name: 📊 Estado del contenedor Traefik
      debug:
        msg: "{{ traefik_status.stdout_lines }}"