---
- name: Instalar y Configurar Traefik como Ingress Controller usando Docker
  hosts: load_balancers
  become: true

  vars:
    traefik_config_dir: "/etc/traefik"
    traefik_token_path: "/mnt/traefik-token/traefik.jwt"
    nfs_backup_token_path: "/srv/nfs/traefik-token/traefik.jwt"
    kubeconfig_path: "/etc/traefik/traefik-kubeconfig.yaml"
    k8s_api_vip: "10.17.5.10"
    master1_ip: "10.17.4.21"

  tasks:
    - name: Copiar certificado CA del API server desde master1
      delegate_to: "{{ master1_ip }}"
      run_once: true
      raw: cat /var/lib/rancher/k3s/server/tls/server-ca.crt
      register: server_ca_cert
      changed_when: false

    - name: Crear directorios para Traefik
      file:
        path: "{{ item }}"
        state: directory
        mode: "0755"
      loop:
        - "{{ traefik_config_dir }}"
        - "{{ traefik_config_dir }}/certs"
        - "{{ traefik_config_dir }}/dynamic_conf"

    - name: Crear directorio local para montar NFS
      file:
        path: "/mnt/traefik-token"
        state: directory
        mode: "0777"

    - name: Crear carpeta y exportaciÃ³n NFS en storage1 con permisos
      delegate_to: 10.17.4.27
      become: true
      block:
        - name: Crear carpeta /srv/nfs/traefik-token con permisos
          raw: mkdir -p /srv/nfs/traefik-token && chmod 0777 /srv/nfs/traefik-token

        - name: Asegurar entrada en /etc/exports
          raw: |
            grep -q "/srv/nfs/traefik-token" /etc/exports || echo "/srv/nfs/traefik-token 10.17.3.0/24(rw,sync,no_subtree_check,no_root_squash)" >> /etc/exports

        - name: Aplicar exportfs y reiniciar nfs-server
          raw: |
            exportfs -rav
            systemctl restart nfs-server

    - name: Montar NFS con token traefik.jwt desde storage1
      shell: |
        mkdir -p /mnt/traefik-token
        mountpoint -q /mnt/traefik-token || mount -t nfs 10.17.4.27:/srv/nfs/traefik-token /mnt/traefik-token
      args:
        executable: /bin/bash
      register: mount_result
      failed_when: mount_result.rc != 0 and 'access denied' not in mount_result.stderr

    - name: Guardar server-ca.crt en los balanceadores
      copy:
        content: "{{ server_ca_cert.stdout_lines | join('\n') }}"
        dest: "{{ traefik_config_dir }}/certs/server-ca.crt"
        mode: "0644"

    - name: Eliminar ServiceAccount y ClusterRoleBinding previos si existen
      delegate_to: "{{ master1_ip }}"
      run_once: true
      raw: |
        kubectl delete clusterrolebinding traefik-sa-crb --ignore-not-found=true || true
        kubectl delete sa traefik-sa -n default --ignore-not-found=true || true

    - name: Crear ServiceAccount para Traefik
      delegate_to: "{{ master1_ip }}"
      run_once: true
      raw: kubectl create sa traefik-sa --namespace default || true

    - name: Crear ClusterRoleBinding para traefik-sa
      delegate_to: "{{ master1_ip }}"
      run_once: true
      raw: kubectl create clusterrolebinding traefik-sa-crb --clusterrole=cluster-admin --serviceaccount=default:traefik-sa

    - name: Generar nuevo token JWT moderno para traefik-sa
      delegate_to: "{{ master1_ip }}"
      run_once: true
      raw: kubectl -n default create token traefik-sa
      register: sa_token_jwt
      changed_when: false

    - name: Guardar token JWT en ruta montada persistente
      shell: echo '{{ sa_token_jwt.stdout | default('') | trim }}' > {{ traefik_token_path }} && chmod 0600 {{ traefik_token_path }}
      args:
        executable: /bin/bash

    - name: Guardar copia del token JWT en nodo storage1
      delegate_to: 10.17.4.27
      become: true
      raw: echo '{{ sa_token_jwt.stdout | default('') | trim }}' > {{ nfs_backup_token_path }} && chmod 0600 {{ nfs_backup_token_path }}

    - name: Generar kubeconfig para Traefik desde master1
      delegate_to: "{{ master1_ip }}"
      run_once: true
      raw: |
        kubectl config set-cluster k3s-cluster \
          --server=https://{{ k8s_api_vip }}:6443 \
          --certificate-authority=/var/lib/rancher/k3s/server/tls/server-ca.crt \
          --embed-certs=true \
          --kubeconfig={{ kubeconfig_path }}

        kubectl config set-credentials traefik-sa \
          --token={{ sa_token_jwt.stdout | default('') | trim }} \
          --kubeconfig={{ kubeconfig_path }}

        kubectl config set-context traefik-context \
          --cluster=k3s-cluster \
          --user=traefik-sa \
          --kubeconfig={{ kubeconfig_path }}

        kubectl config use-context traefik-context \
          --kubeconfig={{ kubeconfig_path }}

    - name: Generar traefik.toml
      template:
        src: "{{ playbook_dir }}/templates/traefik/traefik.toml.j2"
        dest: "{{ traefik_config_dir }}/traefik.toml"
        mode: "0644"
      vars:
        vip: "{{ k8s_api_vip }}"

    - name: Generar archivo docker-compose.yml
      template:
        src: "{{ playbook_dir }}/templates/traefik/docker-compose.yml.j2"
        dest: "{{ traefik_config_dir }}/docker-compose.yml"
        mode: "0644"
      vars:
        vip: "{{ k8s_api_vip }}"

    - name: Reiniciar contenedor Traefik con nuevo token
      shell: |
        docker compose -f {{ traefik_config_dir }}/docker-compose.yml down || true
        docker compose -f {{ traefik_config_dir }}/docker-compose.yml up -d
      args:
        executable: /bin/bash

    - name: Verificar estado del contenedor Traefik
      shell: docker ps -a | grep traefik || true
      register: traefik_status

    - name: Mostrar estado del contenedor Traefik
      debug:
        msg: "{{ traefik_status.stdout_lines }}"