# ansible\playbooks\install_traefik.yml
--- 
- name: Instalar y Configurar Traefik como Ingress Controller usando Docker
  hosts: load_balancers
  become: true

  vars:
    traefik_config_dir: "/etc/traefik"
    traefik_token_path: "/mnt/traefik-token/traefik.jwt"
    nfs_backup_token_path: "/srv/nfs/traefik-token/traefik.jwt"
    kubeconfig_path: "/etc/traefik/traefik-kubeconfig.yaml"
    k8s_api_vip: "10.17.5.10"
    master1_ip: "10.17.4.21"
    storage_ip: "10.17.4.27"

  tasks:
    # Verificar si el token existe y eliminarlo si es necesario
    - name: Verificar si el token existe en el directorio local
      raw: stat {{ traefik_token_path }}
      register: token_check
      ignore_errors: true

    - name: Eliminar token anterior si existe en /mnt/traefik-token
      raw: rm -rf {{ traefik_token_path }}
      when: token_check.rc == 0

    # Verificar si el token de respaldo en NFS existe
    - name: Verificar si el token de respaldo existe en storage1
      delegate_to: "{{ storage_ip }}"
      raw: stat {{ nfs_backup_token_path }}
      register: nfs_token_check
      ignore_errors: true

    - name: Eliminar copia del token JWT en storage1 si existe
      delegate_to: "{{ storage_ip }}"
      raw: rm -rf {{ nfs_backup_token_path }}
      when: nfs_token_check.rc == 0

    # Verificar si NFS est√° montado y desmontarlo si es necesario
    - name: Verificar si el NFS est√° montado
      raw: mountpoint -q /mnt/traefik-token
      register: nfs_mount_status
      ignore_errors: true

    - name: Desmontar NFS si ya est√° montado
      raw: umount -f /mnt/traefik-token
      when: nfs_mount_status.rc == 0

    # Crear directorios para Traefik
    - name: üìÅ Crear directorios para Traefik
      raw: mkdir -p /etc/traefik /etc/traefik/certs /etc/traefik/dynamic_conf
      changed_when: false

    # Generaci√≥n de certificados si no existen
    - name: üîí Verificar si existe el certificado autofirmado
      raw: stat {{ traefik_config_dir }}/certs/traefik.crt
      register: cert_stat
      ignore_errors: true

    - name: üîë Verificar si existe la clave privada autofirmada
      raw: stat {{ traefik_config_dir }}/certs/traefik.key
      register: key_stat
      ignore_errors: true

    - name: üîß Generar certificado autofirmado traefik.crt y traefik.key si no existen
      raw: |
        openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
          -subj "/CN=traefik.local" \
          -keyout {{ traefik_config_dir }}/certs/traefik.key \
          -out {{ traefik_config_dir }}/certs/traefik.crt
      when: cert_stat.rc != 0 or key_stat.rc != 0

    - name: üìÅ Establecer permisos seguros para los certificados
      raw: chmod 644 {{ traefik_config_dir }}/certs/traefik.crt
      when: cert_stat.rc != 0

    - name: üìÅ Establecer permisos seguros para la clave privada
      raw: chmod 600 {{ traefik_config_dir }}/certs/traefik.key
      when: key_stat.rc != 0

    # Crear directorio local para montar NFS
    - name: üìÅ Crear directorio local para montar NFS (modo raw por compatibilidad)
      raw: mkdir -p /mnt/traefik-token
      changed_when: false

    # Instalar Docker y dependencias necesarias
    - name: üõ†Ô∏è Instalar dnf-plugins-core
      raw: dnf install -y dnf-plugins-core

    - name: ‚ûï A√±adir repositorio oficial de Docker
      raw: dnf config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo

    - name: üê≥ Instalar Docker CE y Docker Compose Plugin
      raw: dnf install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin

    - name: ‚ñ∂Ô∏è Habilitar y arrancar Docker
      raw: systemctl enable --now docker

    # Crear carpeta y exportaci√≥n NFS en storage1
    - name: üî¥ Crear carpeta y exportaci√≥n NFS en storage1
      delegate_to: "{{ storage_ip }}"
      raw: |
        mkdir -p /srv/nfs/traefik-token && chmod 0777 /srv/nfs/traefik-token
        grep -q "/srv/nfs/traefik-token" /etc/exports || echo "/srv/nfs/traefik-token 10.17.3.0/24(rw,sync,no_subtree_check,no_root_squash)" >> /etc/exports
        exportfs -rav
        systemctl restart nfs-server

    # Montar NFS con token traefik.jwt desde storage1
    - name: üîó Montar NFS con token traefik.jwt desde storage1
      raw: mount -t nfs {{ storage_ip }}:/srv/nfs/traefik-token /mnt/traefik-token
      register: mount_result
      failed_when: mount_result.rc != 0 and 'access denied' not in mount_result.stderr

    # Generaci√≥n de token JWT
    - name: üìø Generar token JWT para traefik-sa
      delegate_to: "{{ master1_ip }}"
      run_once: true
      raw: kubectl -n default create token traefik-sa
      register: sa_token_jwt
      changed_when: false

    - name: üìÄ Guardar token JWT limpio en /mnt/traefik-token
      raw: echo -n '{{ sa_token_jwt.stdout | trim }}' > {{ traefik_token_path }} && chmod 0600 {{ traefik_token_path }}

    - name: üìÄ Guardar copia del token JWT limpio en storage1 (sin usar Python)
      delegate_to: "{{ storage_ip }}"
      raw: echo -n '{{ sa_token_jwt.stdout | trim }}' > {{ nfs_backup_token_path }} && chmod 0600 {{ nfs_backup_token_path }}

    # Continuar con la configuraci√≥n de Traefik
    - name: ‚öôÔ∏è Generar kubeconfig para Traefik
      delegate_to: "{{ master1_ip }}"
      run_once: true
      raw: |
        kubectl config set-cluster k3s-cluster \
          --server=https://{{ k8s_api_vip }}:6443 \
          --certificate-authority=/var/lib/rancher/k3s/server/tls/server-ca.crt \
          --embed-certs=true \
          --kubeconfig={{ kubeconfig_path }}

        kubectl config set-credentials traefik-sa \
          --token={{ sa_token_jwt.stdout | trim }} \
          --kubeconfig={{ kubeconfig_path }}

        kubectl config set-context traefik-context \
          --cluster=k3s-cluster \
          --user=traefik-sa \
          --kubeconfig={{ kubeconfig_path }}

        kubectl config use-context traefik-context \
          --kubeconfig={{ kubeconfig_path }}

    # Configuraci√≥n de Traefik
    - name: üîß Generar traefik.toml
      template:
        src: "{{ playbook_dir }}/templates/traefik/traefik.toml.j2"
        dest: "{{ traefik_config_dir }}/traefik.toml"
        mode: "0644"
      vars:
        vip: "{{ k8s_api_vip }}"

    - name: üê≥ Generar archivo docker-compose.yml
      template:
        src: "{{ playbook_dir }}/templates/traefik/docker-compose.yml.j2"
        dest: "{{ traefik_config_dir }}/docker-compose.yml"
        mode: "0644"
      vars:
        vip: "{{ k8s_api_vip }}"

    - name: Eliminar acme.json si es un directorio por error
      raw: rm -rf {{ traefik_config_dir }}/acme.json

    - name: Crear archivo acme.json correctamente
      copy:
        dest: "{{ traefik_config_dir }}/acme.json"
        content: "{}"
        mode: "0600"

    - name: üßπ Eliminar contenedor traefik si ya existe (evitar conflicto de nombres)
      shell: |
        docker rm -f traefik || true
      args:
        executable: /bin/bash

    - name: ‚Ü∫ Reiniciar contenedor Traefik con nuevo token
      shell: |
        docker compose -f {{ traefik_config_dir }}/docker-compose.yml up -d
      args:
        executable: /bin/bash

    - name: ‚úÖ Verificar estado del contenedor Traefik
      shell: docker ps -a | grep traefik || true
      register: traefik_status

    - name: üìä Mostrar estado del contenedor Traefik
      debug:
        msg: "{{ traefik_status.stdout_lines }}"

    - name: üßæ Copiar unidad systemd traefik-docker.service
      template:
        src: "{{ playbook_dir }}/templates/traefik/traefik-docker.service.j2"
        dest: "/etc/systemd/system/traefik-docker.service"
        mode: "0644"

    - name: üîÅ Recargar systemd
      command: systemctl daemon-reload

    - name: ‚úÖ Habilitar traefik-docker.service
      systemd:
        name: traefik-docker.service
        enabled: true

    - name: ‚ñ∂Ô∏è Iniciar traefik-docker.service
      systemd:
        name: traefik-docker.service
        state: started