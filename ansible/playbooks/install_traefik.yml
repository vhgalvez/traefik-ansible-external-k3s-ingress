---
- name: Instalar y Configurar Traefik como Ingress Controller usando Docker
  hosts: load_balancers
  become: true

  vars:
    traefik_config_dir: "/etc/traefik"
    traefik_token_path: "/mnt/traefik-token/traefik.jwt"
    nfs_backup_token_path: "/srv/nfs/traefik-token/traefik.jwt"
    k8s_api_vip: "10.17.5.10"
    master1_ip: "10.17.4.21"

  tasks:
    - name: Copiar certificado CA del API server desde master1
      delegate_to: "{{ master1_ip }}"
      run_once: true
      raw: cat /var/lib/rancher/k3s/server/tls/server-ca.crt
      register: server_ca_cert
      changed_when: false

    - name: Crear directorios para Traefik
      file:
        path: "{{ item }}"
        state: directory
        mode: "0755"
      loop:
        - "{{ traefik_config_dir }}"
        - "{{ traefik_config_dir }}/certs"
        - "{{ traefik_config_dir }}/dynamic_conf"

    - name: Crear directorio local para montar NFS
      file:
        path: "/mnt/traefik-token"
        state: directory
        mode: "0755"

    - name: Crear carpeta en storage1 para respaldo de token JWT y configurar /etc/exports
      delegate_to: 10.17.4.27
      become: true
      block:
        - name: Crear carpeta /srv/nfs/traefik-token si no existe
          file:
            path: "/srv/nfs/traefik-token"
            state: directory
            mode: "0755"

        - name: Asegurar configuraci√≥n en /etc/exports
          lineinfile:
            path: /etc/exports
            line: "/srv/nfs/traefik-token 10.17.3.0/24(rw,sync,no_subtree_check)"
            create: yes

        - name: Aplicar exportfs y reiniciar nfs-server
          shell: |
            exportfs -rav
            systemctl restart nfs-server

    - name: Montar NFS con token traefik.jwt desde storage1
      mount:
        path: "/mnt/traefik-token"
        src: "10.17.4.27:/srv/nfs/traefik-token"
        fstype: nfs
        opts: rw,sync,hard,intr
        state: mounted

    - name: Guardar server-ca.crt en los balanceadores
      copy:
        content: "{{ server_ca_cert.stdout_lines | join('\n') }}"
        dest: "{{ traefik_config_dir }}/certs/server-ca.crt"
        mode: "0644"

    - name: Verificar si ya existe token JWT persistente
      stat:
        path: "{{ traefik_token_path }}"
      register: token_check

    - name: Eliminar ServiceAccount y ClusterRoleBinding previos si existen
      delegate_to: "{{ master1_ip }}"
      run_once: true
      raw: |
        kubectl delete clusterrolebinding traefik-sa-crb --ignore-not-found=true || true
        kubectl delete sa traefik-sa -n default --ignore-not-found=true || true
      when: not token_check.stat.exists

    - name: Crear ServiceAccount para Traefik
      delegate_to: "{{ master1_ip }}"
      run_once: true
      raw: kubectl create sa traefik-sa --namespace default || true
      when: not token_check.stat.exists

    - name: Crear ClusterRoleBinding para traefik-sa si no existe
      delegate_to: "{{ master1_ip }}"
      run_once: true
      raw: |
        kubectl get clusterrolebinding traefik-sa-crb || \
        kubectl create clusterrolebinding traefik-sa-crb --clusterrole=cluster-admin --serviceaccount=default:traefik-sa
      changed_when: false
      when: not token_check.stat.exists

    - name: Obtener token moderno (JWT) del ServiceAccount traefik-sa
      delegate_to: "{{ master1_ip }}"
      run_once: true
      raw: kubectl -n default create token traefik-sa
      register: sa_token_jwt
      changed_when: false
      when: not token_check.stat.exists

    - name: Guardar token JWT en ruta NFS persistente montada
      copy:
        content: "{{ sa_token_jwt.stdout | default('') | trim }}"
        dest: "{{ traefik_token_path }}"
        mode: "0600"
      when: not token_check.stat.exists

    - name: Guardar copia del token JWT en NFS en nodo storage1
      delegate_to: 10.17.4.27
      become: true
      copy:
        content: "{{ sa_token_jwt.stdout | default('') | trim }}"
        dest: "{{ nfs_backup_token_path }}"
        mode: "0600"
      when: not token_check.stat.exists

    - name: Generar traefik.toml
      template:
        src: "{{ playbook_dir }}/templates/traefik/traefik.toml.j2"
        dest: "{{ traefik_config_dir }}/traefik.toml"
        mode: "0644"
      vars:
        vip: "{{ k8s_api_vip }}"

    - name: Generar archivo docker-compose.yml
      template:
        src: "{{ playbook_dir }}/templates/traefik/docker-compose.yml.j2"
        dest: "{{ traefik_config_dir }}/docker-compose.yml"
        mode: "0644"
      vars:
        vip: "{{ k8s_api_vip }}"

    - name: Lanzar o reiniciar contenedor Traefik
      shell: |
        docker compose -f {{ traefik_config_dir }}/docker-compose.yml down || true
        docker compose -f {{ traefik_config_dir }}/docker-compose.yml up -d
      args:
        executable: /bin/bash

    - name: Verificar estado del contenedor Traefik
      shell: docker ps -a | grep traefik || true
      register: traefik_status

    - name: Mostrar estado del contenedor Traefik
      debug:
        msg: "{{ traefik_status.stdout_lines }}"